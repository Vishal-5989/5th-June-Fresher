package com.springSecurity.controller;

import java.util.UUID;
import java.util.logging.Logger;
import java.util.logging.Logger;


import javax.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import net.bytebuddy.dynamic.TypeResolutionStrategy.Passive;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.springSecurity.entity.User;
import com.springSecurity.entity.VerificationToken;
import com.springSecurity.entity.listener.RegistrationCompleteEventListner;
import com.springSecurity.event.RegistrationCompleteEvent;
import com.springSecurity.model.PasswordModel;
import com.springSecurity.model.UserModel;
import com.springSecurity.service.UserService;

@RestController
@Slf4j
public class RegistrationController {
	
	@Autowired
	UserService userService;

	Logger log
    = Logger.getLogger(
    		RegistrationCompleteEventListner.class.getName());
	
	@Autowired
	private ApplicationEventPublisher publisher;
	
	@PostMapping("/register")
    public String registerUser(@RequestBody UserModel userModel, final HttpServletRequest request) {
        User user = userService.registerUser(userModel);
        publisher.publishEvent(new RegistrationCompleteEvent(
                user,
                applicationUrl(request)
        ));
        return "Success";
    }
	
	private String applicationUrl(HttpServletRequest request) {
        return "http://" +
                request.getServerName() +
                ":" +
                request.getServerPort() +
                request.getContextPath();
    }
	
	@GetMapping("/verifyRegistration")
    public String verifyRegistration(@RequestParam("token") String token) {
        String result = userService.validateVerificationToken(token);
        if(result.equalsIgnoreCase("valid")) {
            return "User Verified Successfully";
        }
        return "Bad User";
    }
	
	@GetMapping("/resendVerifyToken")
	public String resendVerificationToken(@RequestParam("token") String oldToken, HttpServletRequest request) {
		VerificationToken verificationToken = userService.genrateNewVerificationToken(oldToken);
		User user = verificationToken.getUser();
		resendVerificationTokenMail(user, applicationUrl(request), verificationToken);
		return "Verification Link Sent";
	}

	private void resendVerificationTokenMail(User user, String applicationUrl, VerificationToken verificationToken) {
		String url =
				applicationUrl
                        + "/verifyRegistration?token="
                        + verificationToken.getToken();

        //sendVerificationEmail()
        log.info("Click the link to verify your account: {}" + url);
	}
	
	
	@PostMapping("/resetPassword")
	public String resetPassword(@RequestBody PasswordModel passwordModel, HttpServletRequest request) {
		User user = userService.findUserByEmail(passwordModel.getEmail());
		
		String url = "";
		if(user != null) {
			String token = UUID.randomUUID().toString();
			userService.createPasswordResetTokenForUser(user, token);
			url = passwordResetTokenMail(user, applicationUrl(request), token);
		}
		return url;
	}

	private String passwordResetTokenMail(User user, String applicationUrl, String token) {
		String url =
				applicationUrl
                        + "/savePassword?token="
                        + token;

        //sendVerificationEmail()
        log.info("Click the link to Reset your Password: {}" + url);
		return null;
	}
	
	@PostMapping("/savePassword")
	public String savePassword(@RequestParam("token") String token, @RequestBody PasswordModel passwordModel) {
		
		return null;
	}
	
}